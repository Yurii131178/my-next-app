// Спробуємо навмисно зламати запит, змінивши URL в axios.defaults.baseURL. Після цього ви побачите помилку 500 Internal Server Error у браузері.

// Next.js дозволяє відловлювати ці помилки й відображати власний інтерфейс замість "падіння" сторінки.

// У Next.js ви можете створити файл error.tsx безпосередньо у папці маршруту. Наприклад:

// app/
// └── notes/
//     ├── page.tsx
//     └── error.tsx

// Цей компонент буде автоматично відображений, якщо під час завантаження сторінки виникла помилка.
// app/notes/error.tsx
//.............................................
// 'use client';

// type Props = {
//   error: Error;
// };

// const Error = ({ error }: Props) => {
//   return (
//     <div>
//       <h2>Помилка при завантаженні</h2>
//       <p>{error.message}</p>
//     </div>
//   );
// };

// export default Error;
//...................................................

/**error.tsx завжди рендериться на клієнті, тому обов’язково має містити директиву 'use client'
До компонента передається об’єкт помилки
Ви можете відобразити повідомлення або надати опцію повторити спробу

Тепер, якщо щось піде не так, користувач побачить повідомлення, а не порожню сторінку. */
//...........................................
//...........................................
/**Додамо кнопку "Спробувати знову”

Next.js автоматично передає в error.tsx також функцію reset. Вона скидає помилку і повторно запускає логіку завантаження сторінки. */

// app/notes/error.tsx
//..............................................
'use client';

type Props = {
  error: Error;
  reset: () => void;
};

const Error = ({ error, reset }: Props) => {
  return (
    <div>
      <h2>Помилка при завантаженні</h2>
      <p>{error.message}</p>
      <button onClick={reset}>Спробувати знову</button>
    </div>
  );
};

export default Error;
//.............................................................
